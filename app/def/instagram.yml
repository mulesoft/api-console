%TAG ! tag:heaven-lang.org,1.0:
---
title: Instagram API
version: v1
baseUri: https://api.instagram.com/{version}/
traits:
  secured: 
    name: Secured
    description: |
      Some requests require authentication - specifically requests made on 
      behalf of a user. Authenticated requests require an access_token. These 
      tokens are unique to a user and should be stored securely. Access tokens 
      may expire at any time in the future.
    provides:
      get?:
        queryParameters:
          access_token:
            description: |
              Access Token
            type: string
            example: ACCESS_TOKEN
            required: true
  unsecured: 
    name: Unsecured
    description: |
      For the most part, Instagramâ€™s API only requires the use of a client_id. A 
      client_id simply associates your server, script, or program with a 
      specific application.
    provides:
      get?:
        queryParameters:
          client_id:
            description: |
              Client ID
            type: string
            example: CLIENT_ID
            required: true    
  metaresponse: 
    name: MetaResponse
    description: |
      All response contain the meta key. The meta key is used to communicate extra 
      information about the response to the developer. If all goes well, you'll only 
      ever see a code key with value 200.
    provides:
      get?:
        responses:
          200:
            body:
              application/json:
  rateLimited: 
    name: Rate Limited
    description: |
      Be nice. If you're sending too many requests too quickly, we'll send back a 503 error 
      code (server unavailable).
      You are limited to 5000 requests per hour per access_token or client_id 
      overall. Practically, this means you should (when possible) authenticate users so 
      that limits are well outside the reach of a given user.
    provides:
      get?:
        responses:
          503:
            description: |
              Server Unavailable. Check Your Rate Limits.
  paged: 
    name: Paged
    description: |
      Sometimes you just can't get enough. For this reason, we've provided a convenient way to access more data in 
      any request for sequential data. Simply call the url in the next_url parameter and we'll respond with the 
      next set of data
        {
            ...
            "pagination": {
                "next_url": "https://api.instagram.com/v1/tags/puppy/media/recent?access_token=...&max_id=13872296",
                "next_max_id": "13872296"
            }
        }
      On views where pagination is present, we also support the "count" parameter. Simply set this to the number of
      items you'd like to receive. Note that the default values should be fine for most applications - but if you
      decide to increase this number there is a maximum value defined on each endpoint.
    provides:
      get?:
        queryParameters:
          count:
            description: |
              Number of items you would like to receive.
            type: integer
            example: 1
            required: false
  jsonp: 
    name: JSONP
    description: |
      If you're writing an AJAX application, and you'd like to wrap our response with a callback, 
      all you have to do is specify a callback parameter with any API call:
        https://api.instagram.com/v1/tags/coffee/media/recent?access_token=...&callback=callbackFunction
      Would respond with:
        callbackFunction({
            ...
        });
    provides:
      get?:
        queryParameters:
          callback:
            description: |
              Callback function name. All output will be wrapper under this function name.
            type: string
            example: callbackFunction
            required: false
/media:
  name: Media
  /{mediaId}:
    name: Media
    use:
      - secured
    get:
      summary: Get information about a media object.
      responses:
        200:
          body:
            application/json:
    /comments:
      name: Comments
      use: 
        - paged
        - secured: { method: post }
        - rateLimited: { method: get }
        - rateLimited: { method: post }
      get:
        summary: Get a full list of comments on a media.
        responses:
          200:
            body:
              application/json:
      post:
        summary: Create a comment on a media. Please email apidevelopers[at]instagram.com for access.
        queryParameters:
          text:
            description: Text to post as a comment on the media as specified in {mediaId}.
            type: string
            required: yes
      /{commentId}:
        name: Comment
        use:
            - secured: { method: delete }
            - rateLimited: { method: delete }
        delete:
          summary: |
            Remove a comment either on the authenticated user's media or authored by the authenticated user.
    /likes:
      name: Likes
      use: 
        - secured: { method: get }
        - paged
        - secured: { method: post }
        - secured: { method: delete }
        - rateLimited: { method: get }
        - rateLimited: { method: post }
        - rateLimited: { method: delete }
      get:
        summary: Get a list of users who have liked this media.
        responses:
          200:
            body:
              application/json:
      post:
        summary: Set a like on this media by the currently authenticated user.
        responses:
          201:
            description: |
               Successfully liked a media object
      delete:
        summary: Remove a like on this media by the currently authenticated user.
        responses:
          204:
            description: |
              Like removed succesfully
  /search:
    name: Search Media
    use: [ secured, rateLimited, jsonp ]
    get:
      summary: |
        Search for media in a given area. The default time span is set to 5 days. 
        The time span must not exceed 7 days. Defaults time stamps cover the 
        last 5 days.
      queryParameters:
        lat:
          description: Latitude of the center search coordinate. If used, lng is required.
          required: no
          type: number
        lng:
          description: Longitude of the center search coordinate. If used, lat is required.
          required: no
          type: number
        min_timestamp:
          description: A unix timestamp. All media returned will be taken later than this timestamp.
          type: integer
        max_timestamp:
          description: A unix timestamp. All media returned will be taken earlier than this timestamp.
          type: integer
        distance:
          description: Default is 1km (distance=1000), max distance is 5km.
      responses:
        200:
          body:
            application/json:
  /popular:
    name: Most Popular Media
    use: [ unsecured, rateLimited, paged, jsonp ]
    get:
      description: |
        Get a list of what media is most popular at the moment.
      responses:
        200:
          body:
            application/json:            
/tags:
  name: Tags
  /{tagName}:
    name: Tags
    use:
      - secured
    get:
      summary: Get information about a tag object.
      responses:
        200:
          body:
            application/json:
    /media/recent:
      name: Recent Tagged Media
      get:
        description: |
          Get a list of recently tagged media. Note that this media is ordered by when the media was tagged 
          with this tag, rather than the order it was posted. Use the max_tag_id and min_tag_id parameters 
          in the pagination response to paginate through these objects.
        queryParameters:
          min_id:
            description: |
              Return media before this min_id.
            type: string
            required: false
          max_id:
            description: |
              Return media after this max_id.
            type: string
            required: false
        responses:
          200:
            body:
              application/json:
  /search: 
    name: Tag Search
    get:
      description: |
        Search for tags by name. Results are ordered first as an exact match, then by popularity. 
        Short tags will be treated as exact matches.
      queryParameters:
        q:
          description: |
            A valid tag name without a leading #. (eg. snowy, nofilter)
          type: string
          required: true
      responses:
        200:
          body:
            application/json: